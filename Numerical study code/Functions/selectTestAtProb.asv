function [recommendedTest, extraMetrics] = selectTestAtProb(iteration, sampledVals, testResults, acceptableTests, param, NameValueArgs)
    arguments
        iteration
        sampledVals
        testResults
        acceptableTests
        param
        NameValueArgs.ChatterRiskTolerance
    end
    

    % The matrices don't have the same dimensions!!!
    chatterProbs = GetChatterProbabilities(sampledVals);
    mrrMatrix    = param.CutParamGrid.a .* param.CutParamGrid.b .* param.CutParamGrid.rpm .* param.CutParamGrid.fz .* param.FluteCount;

    mrrMatrix(chatterProbs > NameValueArgs.ChatterRiskTolerance) = 0;

    mrrMatrix(~acceptableTests) = 0;

    [~, ind] = max(mrrMatrix(:));

    testRpm = param.CutParamGrid.rpm(ind);
    testa   = param.CutParamGrid.a(ind);
    testb   = param.CutParamGrid.b(ind);
    testfz  = param.CutParamGrid.fz(ind);
    testDir = param.CutParamGrid.cutDir(ind);
    testMRR = mrrMatrix(ind);

    recommendedTest = struct("RPM", testRpm, "a", testa, "b", testb, "fz", testfz, "CutDirection", testDir, "MRR", testMRR, "CutParamInd", ind);

    extraMetrics = "";

    [~,aeInd,~,fzInd,cutDirInd] = ind2sub(size(param.CutParamGrid.rpm), ind);
    rpmGrid = squeeze(param.CutParamGrid.rpm(:,1,:,1,1));
    apGrid  = squeeze(param.CutParamGrid.b(:,1,:,1,1))*1000;
    figure(1)
    clf
    hold on
    chatterProbs = GetChatterProbabilities(sampledVals);
    chatterProbs = squeeze(chatterProbs(:,aeInd,:,fzInd,cutDirInd));
    surface(rpmGrid, apGrid, zeros(size(rpmGrid)), chatterProbs)
    contour(rpmGrid, apGrid, squeeze(acceptableTests(:,aeInd,:,fzInd,cutDirInd)), [0.1 0.1], 'r')
    contour(rpmGrid, apGrid, squeeze(acceptableTests(:,aeInd,:,fzInd,cutDirInd)), [0.9 0.9], 'b')        
    shading interp
    title(strcat("Radial width = ", num2str(param.RadialWidth(aeInd)*1000), " mm"))
    xlim([min(rpmMatrix, [], 'all') max(rpmMatrix, [], 'all')])
    ylim([0 max(apMatrix, [], 'all')])
    xlabel('Spindle speed (rpm)')
    ylabel('Axial depth of cut (mm)')
    colormap(flipud(gray))
    c=colorbar('Ticks',[0,0.2,0.4,0.6,0.8, 1],'TickLabels',{'100\%', '80\%', '60\%', '40\%', '20\%', '0\%'});
    set(get(c,'label'),'string','Expected probability of stability');
    set(get(c,'label'),'interpreter','latex');
    c.TickLabelInterpreter = 'latex';
    caxis([0 1])
    hold off;
    folderName = 'Figures\\TestSelection';
    if not(isfolder(folderName)), mkdir(folderName), end
    fileName = [num2str(iteration)];
        print('-dpng', strcat(folderName, '\\', fileName), '-r250');

end

